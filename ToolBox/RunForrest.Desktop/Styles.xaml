<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RunForrestPlugin">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="Brushes.xaml" />
  </ResourceDictionary.MergedDictionaries>
  
  <!-- GENERAL STYLES -->
  
  <Style TargetType="{x:Type TextBlock}">
    <Setter Property="Margin" Value="10,0,10,0" />
    <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}" />
  </Style>

  <Style TargetType="{x:Type TextBox}">
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0,0,0,0" />
    <Setter Property="TextWrapping" Value="WrapWithOverflow" />
    <Setter Property="Background" Value="{StaticResource GeneralBackgroundBrush}" />
    <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}" />
    <Setter Property="CaretBrush" Value="{StaticResource GeneralForegroundBrush}" />
  </Style>

  <Style TargetType="{x:Type Button}">
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Background" Value="{StaticResource GeneralBackgroundBrush}" />
    <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                              Margin="25,5,25,5" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource HighlihtBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type RadioButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="RadioButton">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Padding="5,0,5,0">
            <ContentPresenter Focusable="False"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Cursor" Value="Hand"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Foreground" Value="{StaticResource HighlihtBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource HighlihtBrush}"/>
        <Setter Property="Background" Value="{StaticResource GeneralBackgroundBrush}"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="False">
        <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GeneralForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}"/>
      </Trigger>
    </Style.Triggers>
  </Style>
  
  <!-- SPECIAL STYLES -->

  <Style x:Key="InlineButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                              Margin="10,0,10,0" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource HighlihtBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="RicentMenuItemStyle" TargetType="{x:Type MenuItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Border"
                  Background="{StaticResource GeneralBackgroundBrush}"
                  Padding="10,0,10,0">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"
                              ContentSource="Header" RecognizesAccessKey="True"
                              TextBlock.Foreground="{StaticResource GeneralForegroundBrush}"/>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter Property="Background" TargetName="Border" Value="{StaticResource HighlihtBrush}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!--<Style x:Key="RiecentButtonContextMenuStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>-->
  
  <Style x:Key="RicentButton" TargetType="Button" BasedOn="{StaticResource InlineButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Border Background="{TemplateBinding Background}">
            <Grid Margin="5,0,5,0">
              <Path Data="M3,-3 L0,3 L-3,-3"
                    Stretch="Uniform"
                    Stroke="{StaticResource GeneralForegroundBrush}"
                    Fill="{StaticResource GeneralForegroundBrush}" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource HighlihtBrush}" />
            </Trigger>
            <EventTrigger RoutedEvent="Click">
              <EventTrigger.Actions>
                <BeginStoryboard>
                  <Storyboard>
                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                      <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                    </BooleanAnimationUsingKeyFrames>
                  </Storyboard>
                </BeginStoryboard>
              </EventTrigger.Actions>
            </EventTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="HyperlinkTextBlock" TargetType="{x:Type TextBlock}">
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Margin" Value="0,0,10,0" />
  </Style>

  <Style x:Key="HyperlinkStyle" TargetType="{x:Type Hyperlink}">
    <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}"/>
    <Setter Property="TextDecorations" Value="Underline"/>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{StaticResource HighlihtBrush}"/>
      </Trigger>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="Gray"/>
        <!-- !!! TODO. Find the color -->
      </Trigger>
      <Trigger Property="IsEnabled" Value="True">
        <Setter Property="Cursor" Value="Hand"/>
      </Trigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="MenuSeparatorStyle" TargetType="{x:Type TextBlock}">
    <Setter Property="Foreground" Value="{StaticResource GeneralForegroundBrush}" />
    <Setter Property="Margin" Value="0,0,10,0" />
    <Setter Property="VerticalAlignment" Value="Center" />
  </Style>

</ResourceDictionary>